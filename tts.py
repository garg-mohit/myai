
from gtts import gTTS
from moviepy import AudioFileClip, TextClip, CompositeVideoClip, concatenate_videoclips, ImageClip
import textwrap

open_ai_api_key = "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"
image_directory = "/home/gmohit/Pictures/images"
hi_text = """‡§≠‡§æ‡§∞‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§®‡•á 1 ‡§´‡§∞‡§µ‡§∞‡•Ä 2025 ‡§ï‡•ã ‡§µ‡§ø‡§§‡•ç‡§§ ‡§µ‡§∞‡•ç‡§∑ 2025-26 ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ú‡§ü ‡§™‡•ç‡§∞‡§∏‡•ç‡§§‡•Å‡§§ ‡§ï‡§ø‡§Ø‡§æ, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§µ‡§∞‡•ç‡§ó ‡§ï‡•Ä ‡§ï‡•ç‡§∞‡§Ø ‡§∂‡§ï‡•ç‡§§‡§ø ‡§¨‡§¢‡§º‡§æ‡§®‡•á, ‡§∏‡§Æ‡§æ‡§µ‡•á‡§∂‡•Ä ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ ‡§®‡§ø‡§ú‡•Ä ‡§®‡§ø‡§µ‡•á‡§∂ ‡§ï‡•ã ‡§¨‡§¢‡§º‡§æ‡§µ‡§æ ‡§¶‡•á‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§¨‡§ú‡§ü ‡§ï‡•á ‡§™‡•ç‡§∞‡§Æ‡•Å‡§ñ ‡§¨‡§ø‡§Ç‡§¶‡•Å ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§π‡•à‡§Ç:

‡§Ü‡§Ø‡§ï‡§∞ ‡§Æ‡•á‡§Ç ‡§∞‡§æ‡§π‡§§:

‡§®‡§Ø‡§æ ‡§ï‡§∞ ‡§∏‡•ç‡§≤‡•à‡§¨:
1.2 ‡§Æ‡§ø‡§≤‡§ø‡§Ø‡§® ‡§∞‡•Å‡§™‡§Ø‡•á ‡§§‡§ï ‡§ï‡•Ä ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§Ü‡§Ø ‡§™‡§∞ ‡§ï‡•ã‡§à ‡§ï‡§∞ ‡§®‡§π‡•Ä‡§Ç‡•§
2.4 ‡§Æ‡§ø‡§≤‡§ø‡§Ø‡§® ‡§∞‡•Å‡§™‡§Ø‡•á ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§ï‡•Ä ‡§Ü‡§Ø ‡§™‡§∞ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 30% ‡§ï‡§∞ ‡§¶‡§∞ ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã‡§ó‡•Ä‡•§
‡§á‡§∏‡§∏‡•á ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§µ‡§∞‡•ç‡§ó ‡§ï‡•Ä ‡§ï‡•ç‡§∞‡§Ø ‡§∂‡§ï‡•ç‡§§‡§ø ‡§¨‡§¢‡§º‡•á‡§ó‡•Ä ‡§î‡§∞ ‡§â‡§™‡§≠‡•ã‡§ï‡•ç‡§§‡§æ ‡§Æ‡§æ‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•à‡•§
‡§ï‡•É‡§∑‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞:

‡§¶‡§æ‡§≤‡•ã‡§Ç ‡§î‡§∞ ‡§ï‡§™‡§æ‡§∏ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§Æ‡§ø‡§∂‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§ø‡§è ‡§ú‡§æ‡§è‡§Ç‡§ó‡•á ‡§§‡§æ‡§ï‡§ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§Æ‡•á‡§Ç ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§π‡•ã ‡§∏‡§ï‡•á‡•§
17 ‡§Æ‡§ø‡§≤‡§ø‡§Ø‡§® ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§≤‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è ‡§â‡§ö‡•ç‡§ö ‡§â‡§™‡§ú ‡§µ‡§æ‡§≤‡•Ä ‡§´‡§∏‡§≤ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§ï‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§
‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§¨‡•ç‡§∏‡§ø‡§°‡•Ä ‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§ã‡§£ ‡§ï‡•Ä ‡§∏‡•Ä‡§Æ‡§æ ‡§¨‡§¢‡§º‡§æ‡§à ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§
‡§â‡§¶‡•ç‡§Ø‡•ã‡§ó ‡§î‡§∞ ‡§®‡§ø‡§µ‡•á‡§∂:

‡§¨‡•Ä‡§Æ‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§ï‡•ç‡§∑ ‡§µ‡§ø‡§¶‡•á‡§∂‡•Ä ‡§®‡§ø‡§µ‡•á‡§∂ (FDI) ‡§ï‡•Ä ‡§∏‡•Ä‡§Æ‡§æ ‡§¨‡§¢‡§º‡§æ‡§ï‡§∞ 100% ‡§ï‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§
‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü‡§Ö‡§™‡•ç‡§∏, ‡§≤‡§ò‡•Å ‡§â‡§¶‡•ç‡§Ø‡§Æ‡•ã‡§Ç ‡§î‡§∞ ‡§µ‡§ø‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§ï‡•ã ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡•ç‡§∞‡•ã‡§§‡•ç‡§∏‡§æ‡§π‡§® ‡§î‡§∞ ‡§´‡§Ç‡§° ‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§µ‡§∏‡•ç‡§•‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§
‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§µ‡§ø‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§Æ‡§ø‡§∂‡§® ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§
‡§á‡§®‡•ç‡§´‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞ ‡§î‡§∞ ‡§ä‡§∞‡•ç‡§ú‡§æ:

‡§á‡§®‡•ç‡§´‡•ç‡§∞‡§æ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§î‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•Ä‡§Ø ‡§π‡§µ‡§æ‡§à ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡•ã ‡§¨‡§¢‡§º‡§æ‡§µ‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§
‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ñ‡§®‡§ø‡§ú‡•ã‡§Ç ‡§ï‡•á ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§
‡§®‡•ç‡§Ø‡•Ç‡§ï‡•ç‡§≤‡§ø‡§Ø‡§∞ ‡§è‡§®‡§∞‡•ç‡§ú‡•Ä ‡§Æ‡§ø‡§∂‡§® ‡§ï‡•á ‡§§‡§π‡§§ 2047 ‡§§‡§ï 100 ‡§ó‡•Ä‡§ó‡§æ‡§µ‡§æ‡§ü ‡§™‡§∞‡§Æ‡§æ‡§£‡•Å ‡§ä‡§∞‡•ç‡§ú‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡§® ‡§ï‡§æ ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Ø ‡§∞‡§ñ‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§
‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®:

‡§∏‡§ï‡§≤ ‡§ò‡§∞‡•á‡§≤‡•Ç ‡§â‡§§‡•ç‡§™‡§æ‡§¶ (GDP) ‡§Æ‡•á‡§Ç 10.1% ‡§ï‡•Ä ‡§®‡§æ‡§Æ‡§Æ‡§æ‡§§‡•ç‡§∞ ‡§µ‡•É‡§¶‡•ç‡§ß‡§ø ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§π‡•à‡•§
‡§µ‡§ø‡§§‡•ç‡§§‡•Ä‡§Ø ‡§ò‡§æ‡§ü‡§æ GDP ‡§ï‡§æ 4.4% ‡§∞‡§π‡§®‡•á ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶ ‡§π‡•à‡•§
‡§ï‡•Å‡§≤ ‡§¨‡§ú‡§ü ‡§µ‡•ç‡§Ø‡§Ø 50.65 ‡§ü‡•ç‡§∞‡§ø‡§≤‡§ø‡§Ø‡§® ‡§∞‡•Å‡§™‡§Ø‡•á ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§Æ‡§æ‡§® ‡§π‡•à‡•§
‡§á‡§∏ ‡§¨‡§ú‡§ü ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§ï‡§æ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§ï‡•ã ‡§ó‡§§‡§ø ‡§¶‡•á‡§®‡§æ, ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§µ‡§∞‡•ç‡§ó ‡§ï‡•ã ‡§∞‡§æ‡§π‡§§ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡§æ ‡§î‡§∞ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§≤‡§æ‡§®‡§æ ‡§π‡•à‡•§

"""


font_path = "/usr/share/fonts/truetype/samyak/Samyak-Devanagari.ttf"

def get_tts(text):
    # === Step 1: Convert Text to Speech ===
    audio_path = "../audio.mp3"
    tts = gTTS(text, lang="hi")  # Use Hindi language
    tts.save(audio_path)

    # Load generated audio
    audio = AudioFileClip(audio_path)
    return audio

def generate_subtitles(text, duration, max_chars=30):
    words = text.split()
    subtitles = []
    start_time = 0
    time_per_word = duration / len(words)

    for i in range(0, len(words), max_chars):
        subtitle_text = " ".join(words[i:i+max_chars])
        end_time = start_time + len(words[i:i+max_chars]) * time_per_word
        subtitles.append((subtitle_text, start_time, end_time))
        start_time = end_time

    #return subtitles

    #subtitles = generate_subtitles(text, audio_duration)

    # üîπ Step 5: Create Subtitle Clips
    subtitle_clips = []
    for subtitle, start, end in subtitles:
        text_clip = TextClip(subtitle, fontsize=40, font="DejaVu-Sans", color="white", bg_color="black", size=(1200, 100))
        text_clip = text_clip.set_position(("center", "bottom")).set_start(start).set_end(end)
        subtitle_clips.append(text_clip)
    return subtitle_clips



def get_video(audio, image_files):
    num_images = len(image_files)
    wrapped_texts = textwrap.wrap(hi_text, width=50)  # Adjust 'width' as needed
    text_chunks = wrapped_texts[:num_images]  # Trim to fit available images
    # Calculate duration per image based on audio length
    duration_per_image = audio.duration / num_images
    #durations = [duration_per_image] * num_images  # Equal duration for all images

    # === Step 3: Create Video with Images and Overlay Text ===
    clips = []
    for img in image_files:
        #img_clip = ImageSequenceClip([img], durations=[duration_per_image])
        img_clip = ImageClip(img)
        img_clip.duration = duration_per_image
        # text_clip = TextClip(font=font_path, font_size=20, text=text_chunk, color="orange", bg_color="black")#, size=(1280, 100))
        # text_clip.duration = duration_per_image
        # text_clip.with_position("center", "bottom")

        # Merge image and text
        #final_clip = CompositeVideoClip([img_clip])
        #final_clip.duration = duration_per_image
        clips.append(img_clip)

    # Concatenate all clips
    #final_video = ImageSequenceClip(clips, durations=durations)
    final_video = concatenate_videoclips(clips, method="compose")
    final_video.audio = audio

    # Save the final video
    output_video = f"{image_directory}/output.mp4"
    final_video.write_videofile(output_video, fps=24, codec="libx264", audio_codec="aac")

    print("‚úÖ Video created successfully: output.mp4")


if __name__ == "__main__":
    image_files = [f"{image_directory}/1.jpg",
                   f"{image_directory}/2.jpg",
                   f"{image_directory}/3.jpg",
                   f"{image_directory}/4.jpg",
                   f"{image_directory}/5.jpg",
                   f"{image_directory}/6.jpg",
                   f"{image_directory}/7.jpg"
                   ]

    audio = get_tts(hi_text)
    get_video(audio, image_files)
